version: '3'
services:
  app:
    build: .
    ports:
      - "8080:8080"
    container_name: myapp_container
    depends_on:
      - postgres
      - redis
      - cassandra-node1
      - rabbitmq
    restart: unless-stopped
    environment:
      - LOG_LEVEL=debug
    networks:
      - backend

  cassandra-node1:
    image: cassandra:latest
    container_name: cassandra-node1
    environment:
      - CASSANDRA_CLUSTER_NAME=TestCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_SEEDS=cassandra-node1
      - CASSANDRA_START_RPC=true
      - CASSANDRA_NUM_TOKENS=256
    ports:
      - "9042:9042"
    volumes:
      - cassandra-data1:/var/lib/cassandra
    networks:
      - backend


  postgres:
    image: bitnami/postgresql
    container_name: mydb_container
    environment:
      - POSTGRESQL_DATABASE=myapp_db
      - POSTGRESQL_USERNAME=myapp_user
      - POSTGRESQL_PASSWORD=your_secure_password
    volumes:
      - postgres_data:/bitnami/postgresql
    networks:
      - backend

  redis:
    image: redis/redis-stack:latest
    container_name: myredis_container
    # command: redis-server --requirepass your_redis_password
    volumes:
      - redis_data:/data  # Persist Redis data
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_DEFAULT_VHOST=/
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Persist RabbitMQ data
    networks:
      - backend

volumes:
  postgres_data:
  cassandra-data1:
  redis_data:
  rabbitmq_data:

networks:
  backend:
    driver: bridge